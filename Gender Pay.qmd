---
title: "Gender Pay Gaps"
format: html
editor: visual
Author: "Dency Claris Thomas"
---

## The data-set used

Install the stevedata package in R and use the gss_wages data set. We can read the documentation about the data.

## Format

A data frame with 11 variables:

`year`

:   the survey year

`realrinc`

:   the respondent's base income (in constant 1986 USD)

`age`

:   the respondent's age in years

`occ10`

:   respondent's occupation code (2010)

`occrecode`

:   recode of the occupation code into one of 11 main categories

`prestg10`

:   respondent's occupational prestige score (2010)

`childs`

:   number of children (0-8)

`wrkstat`

:   the work status of the respondent (full-time, part-time, temporarily not working, unemployed (laid off), retired, school, housekeeper, other)

`gender`

:   respondent's gender (male or female)

`educcat`

:   respondent's degree level (Less Than High School, High School, Junior College, Bachelor, or Graduate)

`maritalcat`

:   respondent's marital status (Married, Widowed, Divorced, Separated, Never Married)

```{r}
library(stevedata)

library(tidyverse)
```

```{r}
gss_wages|> glimpse()
```

```{r}
wage_data <- as_tibble(gss_wages)

wage_data

wage_data_filtered <- wage_data[complete.cases(wage_data), ]
wage_data_filtered
```

### Bar plot to visualize the average income by gender

```{r}
# Average income by gender

avg_income_gender <- wage_data_filtered |>
  group_by(gender) |>
  summarise(avg_income = mean(realrinc, na.rm = TRUE))
avg_income_gender

# Bar plot
ggplot(avg_income_gender, aes(x = gender, y = avg_income, fill = gender)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Average Income by Gender", x = "Gender", y = "Average Income (USD)") +
  theme_minimal()
```

### Time Trends in Gender Pay Gap:

The resulting chart will show how the average income has changed over the survey years for both genders, allowing us to observe trends in the gender pay gap over the survey years.

```{r}
# Convert 'year' to a factor for better visualization
wage_data$year <- as.factor(wage_data$year)

# Calculate average income for each gender and year
avg_income_gender_year <- wage_data |>
  group_by(year, gender) |>
  summarise(avg_income = mean(realrinc, na.rm = TRUE))
  avg_income_gender_year
  
# Create a point chart
ggplot(avg_income_gender_year, aes(x = avg_income, y = year, color = gender)) +
  geom_point() +
  labs(title = "Time Trends in Gender Pay Gap",
       x = "Average Income",
       y = "Year",
       color = "Gender") +
  theme_minimal() 
```

```{r}
# Convert 'year' to a factor for better visualization
wage_data$year <- as.factor(wage_data$year)

# Calculate average income for each gender and year
avg_income_gender_year <- wage_data %>%
  group_by(year, gender) %>%
  summarise(avg_income = mean(realrinc, na.rm = TRUE))

# Create a point and line chart
ggplot(avg_income_gender_year, aes(x = year, y = avg_income, color = gender, group = gender)) +
  geom_point(size = 3) +
  geom_line(size = 1, alpha = 0.7) +
  labs(title = "Time Trends in Gender Pay Gap",
       x = "Year",
       y = "Average Income",
       color = "Gender") +
  theme_minimal()

```

### Income by Education Level:

\- Using box plots to compare the distribution of income for different education levels (educcat) separately for males and females.

```{r}
# Convert 'gender' to a factor for better visualization
wage_data$gender <- as.factor(wage_data$gender)

# Create box plots
ggplot(wage_data_filtered, aes(x = realrinc , y = educcat, fill = gender)) +
  geom_boxplot() +
  labs(title = "Income by Education Level",
       x = "Income (realrinc)",
       y = "Education Level",
       fill = "Gender") +
  theme_minimal() 
```

### Age vs. Income:

\- Visualizing the correlation between age and income using a scatter plot, with different colors for males and females.

```{r}
# Create a scatter plot with alpha transparency
ggplot(wage_data, aes(x = age, y = realrinc, color = gender)) +
  geom_point(alpha = 0.5, na.rm = TRUE) +
  labs(title = "Age vs. Income",
       x = "Age",
       y = "Income (realrinc)",
       color = "Gender") +
  theme_minimal()
```

### Income vs Work Status by Gender

```{r}

# Grouped Bar Plot
ggplot(wage_data_filtered, aes(x = wrkstat, y = realrinc, fill = gender)) +
  geom_bar(stat = "summary", fun = "mean", position = "dodge") +
  labs(title = "Income vs Work Status by Gender",
       x = "Work Status",
       y = "Mean Income (realrinc)",
       fill = "Gender") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

### Marital Status vs Income by Gender

```{r}

# Box Plot
ggplot(wage_data_filtered, aes(x = maritalcat, y = realrinc, fill = gender)) +
  geom_boxplot() +
  labs(title = "Income vs Marital Status by Gender",
       x = "Marital Status",
       y = "Income (realrinc)",
       fill = "Gender") +
  theme_minimal() 

```

### Distribution of Marital Status and Work Status by Gender

```{r}
# Stacked Bar Plot
ggplot(wage_data_filtered, aes(x = maritalcat, fill = wrkstat)) +
  geom_bar(position = "stack") +
  facet_wrap(~gender, scales = 'free_y') +
  labs(title = "Distribution of Marital Status and Work Status by Gender",
       x = "Marital Status",
       fill = "Work Status") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

### Average Income by Number of Children

```{r}
# Remove rows with NA values
wage_data_filtered <- wage_data[complete.cases(wage_data[, c('childs', 'realrinc', 'gender', 'maritalcat')]), ]

# Create Grouped Bar Plot
ggplot(wage_data_filtered, aes(x = factor(childs), y = realrinc, fill = gender)) +
  geom_bar(stat = "summary", fun = "mean", position = "dodge") +
  labs(title = "Average Income by Number of Children",
       x = "Number of Children",
       y = "Average Income (realrinc)",
       fill = "Gender") +
  theme_minimal()

```

### Distribution of Income Levels by Number of Children

```{r}
# Define income categories (you can adjust these based on your data)
income_categories <- cut(wage_data_filtered$realrinc, breaks = c(0, 20000, 40000, 60000, 80000, Inf),
                          labels = c("0-20k", "20k-40k", "40k-60k", "60k-80k", "80k+"), include.lowest = TRUE)

# Create Stacked Bar Plot
ggplot(wage_data_filtered, aes(x = factor(childs), fill = income_categories)) +
  geom_bar(position = "fill") +
  facet_wrap(~gender, scales = 'free_y') +
  labs(title = "Distribution of Income Levels by Number of Children",
       x = "Number of Children",
       fill = "Income Level") +
  theme_minimal()

```

### Correlation between age, income and child

```{r}
library(corrplot)

# Select numerical variables for correlation analysis
numerical_vars <- wage_data_filtered |>
  select(age, realrinc, childs)

# Calculate correlation matrix
cor_matrix <- cor(numerical_vars, use = "complete.obs")

# Create correlation heatmap
corrplot(cor_matrix, method = "color", addCoef.col = "black", tl.col = "black")

```

```{r}
# Define salary ranges
salary_ranges <- cut(wage_data_filtered$realrinc, breaks = c(0, 20000, 40000, 60000, 80000, Inf),
                     labels = c("0-20k", "20k-40k", "40k-60k", "60k-80k", "80k+"))

# Create a new variable for salary ranges
wages <- mutate(wage_data_filtered, salary_range = salary_ranges)

# Create a summary table for counting the number of men and women in each salary range
summary_table <- wages |>
  group_by(gender, salary_range) |>
  summarise(count = n()) |>
  mutate(percentage = (count / sum(count)) * 100)

# Plot the line plot
ggplot(summary_table, aes(x = salary_range, y = percentage, color = gender, group = gender)) +
  geom_line(size = 1) +
  geom_point(size = 3) +
  geom_text(aes(label = sprintf("%.1f%%", percentage), vjust = -0.5), position = position_dodge(0.8), size = 3) +
  labs(title = "Income Distribution by Gender",
       x = "Salary Range",
       y = "Percentage",
       color = "Gender") +
  theme_minimal()+
  theme(axis.text.y = element_blank(),
        axis.title.y = element_blank())
```

```{r}
# Define a mapping of original work statuses to shorter names
work_status_mapping <- c("Unemployed, Laid Off" = "Unemployed",
                         "Temporarily Not Working" = "Temporarily NW")

# Create a new variable with shorter work status names
wage_data_filtered2 <- wage_data_filtered |>
  mutate(short_wrkstat = recode_factor(wrkstat, !!!work_status_mapping))

# Exclude "Other" category and reorder work statuses based on average income
ordered_wrkstat <- wage_data_filtered2 |>
  filter(wrkstat != "Other") |>
  group_by(short_wrkstat) |>
  summarise(avg_income = mean(realrinc, na.rm = TRUE)) |>
  arrange(avg_income) |>
  pull(short_wrkstat)

# Create a line plot with sorted work statuses (excluding "Other") and shorter names
ggplot(wage_data_filtered2 |> filter(wrkstat != "Other"), 
       aes(x = reorder(factor(short_wrkstat, levels = ordered_wrkstat), realrinc, FUN = mean), 
           y = realrinc, color = gender, group = gender)) +
  stat_summary(fun = mean, geom = "line", size = 1) +
  labs(title = "Average Income by Work Status and Gender",
       x = "Work Status",
       y = "Average Income",
       color = "Gender") +
  theme_minimal() +
  guides(x = guide_axis(n.dodge = 2))

```

```{r}
# Define a mapping of original education levels to shorter names
educcat_mapping <- c("Less Than High School" = "Less Than HS")

# Create a new variable with shorter work status names
wage_data_filtered2 <- wage_data_filtered %>%
  mutate(short_educcat = recode_factor(educcat, !!!educcat_mapping))

# Reorder education levels based on average income
ordered_educcat <- wage_data_filtered2 %>%
  group_by(educcat) %>%
  summarise(avg_income = mean(realrinc, na.rm = TRUE)) %>%
  arrange(avg_income) %>%
  pull(educcat)

# Create a line plot with sorted education levels
ggplot(wage_data_filtered2, aes(x = reorder(short_educcat, realrinc, FUN = mean), y = realrinc, color = gender, group = gender)) +
  stat_summary(fun = mean, geom = "line", size = 1) +
  labs(title = "Average Income by Education Level and Gender",
       x = "Education Level",
       y = "Average Income",
       color = "Gender") +
  theme_minimal() +
  guides(x = guide_axis(n.dodge = 2))
```

```{r}
wage_data_filtered$log_realrinc <- log1p(wage_data_filtered$realrinc)
# Create a violin plot
ggplot(wage_data_filtered, aes(x = cut(age, breaks = seq(20, 90, by = 10)), y = realrinc, fill = gender)) +
  geom_violin() +
  labs(title = "Income Distribution Across Age Categories by Gender",
       x = "Age Category",
       y = "Income",
       fill = "Gender") +
  theme_minimal()

```

```{r}
# Log transform the income variable
wage_data_filtered$log_realrinc <- log1p(wage_data_filtered$realrinc)  # log1p is used to handle zeros in the data

# Create a box plot with log-transformed income
ggplot(wage_data_filtered, aes(x = cut(age, breaks = seq(20, 90, by = 10)), y = log_realrinc, fill = gender)) +
  geom_boxplot() +
  labs(title = "Log-Transformed Income Distribution Across Age Categories by Gender",
       x = "Age Category",
       y = "Log(Income)",
       fill = "Gender") +
  theme_minimal()
```

```{r}
# Log transform the income variable
wage_data_filtered$log_realrinc <- log1p(wage_data_filtered$realrinc)  # log1p is used to handle zeros in the data

# Create a kernel density plot with log-transformed income
ggplot(wage_data_filtered, aes(x = log_realrinc, fill = wrkstat)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density of Log-Transformed Income Across Work Status",
       x = "Log(Income)",
       y = "Density",
       fill = "Work Status") +
  facet_wrap(~gender) +
  theme_minimal()
```

```{r}
# Create a scatter plot
ggplot(wage_data_filtered, aes(x = childs, y = realrinc, color = maritalcat)) +
  geom_point(alpha = 0.6, size = 3) +
  labs(title = "Scatter Plot of Income vs. Number of Children, Colored by Marital Status",
       x = "Number of Children",
       y = "Income",
       color = "Marital Status") +
  theme_minimal()
```

```{r}
# Create kernel density plots with log-transformed income
ggplot(wage_data_filtered, aes(x = log(realrinc), fill = gender)) +
  geom_density(alpha = 0.5, color = "black") +
  facet_wrap(~maritalcat, scales = "free") +
  labs(title = "Log-Transformed Income Density Distribution by Marital Status and Gender",
       x = "Log(Income)",
       fill = "Gender") +
  theme_minimal()

```

```{r}
# Create kernel density plots with log-transformed income
ggplot(wage_data_filtered, aes(x = log(realrinc), fill = gender)) +
  geom_density(alpha = 0.5, color = "black") +
  facet_wrap(~educcat, scales = "free") +
  labs(title = "Log-Transformed Income Density Distribution by Education Level and Gender",
       x = "Log(Income)",
       fill = "Gender") +
  theme_minimal()
```

```{r}
# Create kernel density plots with log-transformed income based on the number of children
ggplot(wage_data_filtered, aes(x = log(realrinc), fill = gender)) +
  geom_density(alpha = 0.5, color = "black") +
  facet_wrap(~childs, scales = "free") +
  labs(title = "Log-Transformed Income Density Distribution by Number of Children and Gender",
       x = "Log(Income)",
       fill = "Gender") +
  theme_minimal()

```

```{r}
# Create custom age groups
wage_data_filtered3 <- wage_data_filtered %>%
  mutate(age_group = cut(age, breaks = c(-Inf, 30, 40, 50, 60, 70, Inf), labels = c("20-30", "30-40", "40-50", "50-60", "60-70", "70+")))

# Create kernel density plots with log-transformed income based on custom age groups
ggplot(wage_data_filtered3, aes(x = log(realrinc), fill = gender)) +
  geom_density(alpha = 0.5, color = "black") +
  facet_wrap(~age_group, scales = "free") +
  labs(title = "Log-Transformed Income Density Distribution by Age Group and Gender",
       x = "Log(Income)",
       fill = "Gender") +
  theme_minimal()


```
